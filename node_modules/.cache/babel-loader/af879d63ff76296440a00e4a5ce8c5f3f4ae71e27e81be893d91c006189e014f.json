{"ast":null,"code":"import apiClient from'./api';class NotificationService{// Get all notifications for current user\nasync getNotifications(){try{const response=await apiClient.get('/notifications');// Backend returns array directly, not wrapped in notifications field\nreturn{success:true,notifications:response.data};}catch(error){var _error$response,_error$response$data;return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to fetch notifications'};}}// Get unread notifications count\nasync getUnreadCount(){try{const response=await apiClient.get('/notifications/unread/count');return{success:true,count:response.data.count};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch unread count'};}}// Mark notification as read\nasync markAsRead(notificationId){try{const response=await apiClient.patch(`/notifications/${notificationId}/read`);return{success:true,notification:response.data.notification};}catch(error){var _error$response3,_error$response3$data;return{success:false,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to mark notification as read'};}}// Mark all notifications as read\nasync markAllAsRead(){try{const response=await apiClient.patch('/notifications/read-all');return{success:true,message:response.data.message,count:response.data.count};}catch(error){var _error$response4,_error$response4$data;return{success:false,error:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to mark all notifications as read'};}}// Delete specific notification\nasync deleteNotification(notificationId){try{await apiClient.delete(`/notifications/${notificationId}`);return{success:true};}catch(error){var _error$response5,_error$response5$data;return{success:false,error:((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to delete notification'};}}// Delete all notifications\nasync deleteAllNotifications(){try{await apiClient.delete('/notifications');return{success:true};}catch(error){var _error$response6,_error$response6$data;return{success:false,error:((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Failed to delete all notifications'};}}// Create notification (Admin only)\nasync createNotification(notificationData){try{const response=await apiClient.post('/notifications/admin/create',notificationData);return{success:true,notification:response.data.notification};}catch(error){var _error$response7,_error$response7$data;return{success:false,error:((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Failed to create notification'};}}}const notificationService=new NotificationService();export default notificationService;export const getNotifications=async()=>{try{const response=await apiClient.get('/notifications');// Backend returns array directly, not wrapped in notifications field\nreturn{success:true,notifications:response.data};}catch(error){var _error$response8,_error$response8$data;return{success:false,error:((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||'Failed to fetch notifications'};}};","map":{"version":3,"names":["apiClient","NotificationService","getNotifications","response","get","success","notifications","data","error","_error$response","_error$response$data","message","getUnreadCount","count","_error$response2","_error$response2$data","markAsRead","notificationId","patch","notification","_error$response3","_error$response3$data","markAllAsRead","_error$response4","_error$response4$data","deleteNotification","delete","_error$response5","_error$response5$data","deleteAllNotifications","_error$response6","_error$response6$data","createNotification","notificationData","post","_error$response7","_error$response7$data","notificationService","_error$response8","_error$response8$data"],"sources":["D:/senior.project/pet-health-docs/src/services/notificationService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass NotificationService {\r\n  // Get all notifications for current user\r\n  async getNotifications() {\r\n    try {\r\n      const response = await apiClient.get('/notifications');\r\n      // Backend returns array directly, not wrapped in notifications field\r\n      return { success: true, notifications: response.data };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch notifications',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get unread notifications count\r\n  async getUnreadCount() {\r\n    try {\r\n      const response = await apiClient.get('/notifications/unread/count');\r\n      return { success: true, count: response.data.count };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch unread count',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark notification as read\r\n  async markAsRead(notificationId) {\r\n    try {\r\n      const response = await apiClient.patch(`/notifications/${notificationId}/read`);\r\n      return { success: true, notification: response.data.notification };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to mark notification as read',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark all notifications as read\r\n  async markAllAsRead() {\r\n    try {\r\n      const response = await apiClient.patch('/notifications/read-all');\r\n      return { success: true, message: response.data.message, count: response.data.count };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to mark all notifications as read',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete specific notification\r\n  async deleteNotification(notificationId) {\r\n    try {\r\n      await apiClient.delete(`/notifications/${notificationId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete notification',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete all notifications\r\n  async deleteAllNotifications() {\r\n    try {\r\n      await apiClient.delete('/notifications');\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete all notifications',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create notification (Admin only)\r\n  async createNotification(notificationData) {\r\n    try {\r\n      const response = await apiClient.post('/notifications/admin/create', notificationData);\r\n      return { success: true, notification: response.data.notification };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create notification',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst notificationService = new NotificationService();\r\nexport default notificationService;\r\n\r\nexport const getNotifications = async () => {\r\n  try {\r\n    const response = await apiClient.get('/notifications');\r\n    // Backend returns array directly, not wrapped in notifications field\r\n    return { success: true, notifications: response.data };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.response?.data?.message || 'Failed to fetch notifications',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}