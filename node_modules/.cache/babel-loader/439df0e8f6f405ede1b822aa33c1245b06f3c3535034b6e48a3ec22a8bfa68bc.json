{"ast":null,"code":"import apiClient from'./api';class UploadService{// Upload single file\nasync uploadFile(file,onProgress){try{const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/upload',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{if(onProgress){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);onProgress(percentCompleted);}}});return{success:true,file:response.data};}catch(error){var _error$response,_error$response$data;return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to upload file'};}}// Upload multiple files\nasync uploadMultipleFiles(files,onProgress){try{const formData=new FormData();files.forEach(file=>{formData.append('files',file);});const response=await apiClient.post('/upload/multiple',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{if(onProgress){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);onProgress(percentCompleted);}}});return{success:true,files:response.data.files};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to upload files'};}}// Get uploaded files\nasync getUploadedFiles(){try{const response=await apiClient.get('/upload');return{success:true,files:response.data.files};}catch(error){var _error$response3,_error$response3$data;return{success:false,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to fetch uploaded files'};}}// Delete file\nasync deleteFile(filename){try{await apiClient.delete(`/upload/${filename}`);return{success:true};}catch(error){var _error$response4,_error$response4$data;return{success:false,error:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to delete file'};}}// Validate file before upload\nvalidateFile(file){let maxSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5*1024*1024;let allowedTypes=arguments.length>2&&arguments[2]!==undefined?arguments[2]:['image/jpeg','image/png','image/gif','application/pdf'];const errors=[];// Check file size\nif(file.size>maxSize){errors.push(`ไฟล์มีขนาดใหญ่เกินไป (สูงสุด ${maxSize/1024/1024}MB)`);}// Check file type\nif(!allowedTypes.includes(file.type)){errors.push('ประเภทไฟล์ไม่ถูกต้อง');}return{isValid:errors.length===0,errors};}// Get file preview URL\ngetFilePreviewUrl(file){if(file.type.startsWith('image/')){return URL.createObjectURL(file);}return null;}}const uploadService=new UploadService();export default uploadService;","map":{"version":3,"names":["apiClient","UploadService","uploadFile","file","onProgress","formData","FormData","append","response","post","headers","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","success","data","error","_error$response","_error$response$data","message","uploadMultipleFiles","files","forEach","_error$response2","_error$response2$data","getUploadedFiles","get","_error$response3","_error$response3$data","deleteFile","filename","delete","_error$response4","_error$response4$data","validateFile","maxSize","arguments","length","undefined","allowedTypes","errors","size","push","includes","type","isValid","getFilePreviewUrl","startsWith","URL","createObjectURL","uploadService"],"sources":["D:/senior.project/pet-health-docs/src/services/uploadService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass UploadService {\r\n  // Upload single file\r\n  async uploadFile(file, onProgress) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await apiClient.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress) {\r\n            const percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            onProgress(percentCompleted);\r\n          }\r\n        },\r\n      });\r\n\r\n      return { success: true, file: response.data };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to upload file',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Upload multiple files\r\n  async uploadMultipleFiles(files, onProgress) {\r\n    try {\r\n      const formData = new FormData();\r\n      files.forEach((file) => {\r\n        formData.append('files', file);\r\n      });\r\n\r\n      const response = await apiClient.post('/upload/multiple', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress) {\r\n            const percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            onProgress(percentCompleted);\r\n          }\r\n        },\r\n      });\r\n\r\n      return { success: true, files: response.data.files };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to upload files',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get uploaded files\r\n  async getUploadedFiles() {\r\n    try {\r\n      const response = await apiClient.get('/upload');\r\n      return { success: true, files: response.data.files };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch uploaded files',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete file\r\n  async deleteFile(filename) {\r\n    try {\r\n      await apiClient.delete(`/upload/${filename}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete file',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate file before upload\r\n  validateFile(file, maxSize = 5 * 1024 * 1024, allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']) {\r\n    const errors = [];\r\n\r\n    // Check file size\r\n    if (file.size > maxSize) {\r\n      errors.push(`ไฟล์มีขนาดใหญ่เกินไป (สูงสุด ${maxSize / 1024 / 1024}MB)`);\r\n    }\r\n\r\n    // Check file type\r\n    if (!allowedTypes.includes(file.type)) {\r\n      errors.push('ประเภทไฟล์ไม่ถูกต้อง');\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  // Get file preview URL\r\n  getFilePreviewUrl(file) {\r\n    if (file.type.startsWith('image/')) {\r\n      return URL.createObjectURL(file);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst uploadService = new UploadService();\r\nexport default uploadService;\r\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,OAAO,CAE7B,KAAM,CAAAC,aAAc,CAClB;AACA,KAAM,CAAAC,UAAUA,CAACC,IAAI,CAAEC,UAAU,CAAE,CACjC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEJ,IAAI,CAAC,CAE7B,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,IAAI,CAAC,SAAS,CAAEJ,QAAQ,CAAE,CACzDK,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CAAC,CACDC,gBAAgB,CAAGC,aAAa,EAAK,CACnC,GAAIR,UAAU,CAAE,CACd,KAAM,CAAAS,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,CAAG,GAAG,CAAIJ,aAAa,CAACK,KAC/C,CAAC,CACDb,UAAU,CAACS,gBAAgB,CAAC,CAC9B,CACF,CACF,CAAC,CAAC,CAEF,MAAO,CAAEK,OAAO,CAAE,IAAI,CAAEf,IAAI,CAAEK,QAAQ,CAACW,IAAK,CAAC,CAC/C,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACd,MAAO,CACLJ,OAAO,CAAE,KAAK,CACdE,KAAK,CAAE,EAAAC,eAAA,CAAAD,KAAK,CAACZ,QAAQ,UAAAa,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBF,IAAI,UAAAG,oBAAA,iBAApBA,oBAAA,CAAsBC,OAAO,GAAI,uBAC1C,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAC,mBAAmBA,CAACC,KAAK,CAAErB,UAAU,CAAE,CAC3C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BmB,KAAK,CAACC,OAAO,CAAEvB,IAAI,EAAK,CACtBE,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEJ,IAAI,CAAC,CAChC,CAAC,CAAC,CAEF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,IAAI,CAAC,kBAAkB,CAAEJ,QAAQ,CAAE,CAClEK,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CAAC,CACDC,gBAAgB,CAAGC,aAAa,EAAK,CACnC,GAAIR,UAAU,CAAE,CACd,KAAM,CAAAS,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,CAAG,GAAG,CAAIJ,aAAa,CAACK,KAC/C,CAAC,CACDb,UAAU,CAACS,gBAAgB,CAAC,CAC9B,CACF,CACF,CAAC,CAAC,CAEF,MAAO,CAAEK,OAAO,CAAE,IAAI,CAAEO,KAAK,CAAEjB,QAAQ,CAACW,IAAI,CAACM,KAAM,CAAC,CACtD,CAAE,MAAOL,KAAK,CAAE,KAAAO,gBAAA,CAAAC,qBAAA,CACd,MAAO,CACLV,OAAO,CAAE,KAAK,CACdE,KAAK,CAAE,EAAAO,gBAAA,CAAAP,KAAK,CAACZ,QAAQ,UAAAmB,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBR,IAAI,UAAAS,qBAAA,iBAApBA,qBAAA,CAAsBL,OAAO,GAAI,wBAC1C,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAM,gBAAgBA,CAAA,CAAG,CACvB,GAAI,CACF,KAAM,CAAArB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAAC8B,GAAG,CAAC,SAAS,CAAC,CAC/C,MAAO,CAAEZ,OAAO,CAAE,IAAI,CAAEO,KAAK,CAAEjB,QAAQ,CAACW,IAAI,CAACM,KAAM,CAAC,CACtD,CAAE,MAAOL,KAAK,CAAE,KAAAW,gBAAA,CAAAC,qBAAA,CACd,MAAO,CACLd,OAAO,CAAE,KAAK,CACdE,KAAK,CAAE,EAAAW,gBAAA,CAAAX,KAAK,CAACZ,QAAQ,UAAAuB,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBZ,IAAI,UAAAa,qBAAA,iBAApBA,qBAAA,CAAsBT,OAAO,GAAI,gCAC1C,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAU,UAAUA,CAACC,QAAQ,CAAE,CACzB,GAAI,CACF,KAAM,CAAAlC,SAAS,CAACmC,MAAM,CAAC,WAAWD,QAAQ,EAAE,CAAC,CAC7C,MAAO,CAAEhB,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOE,KAAK,CAAE,KAAAgB,gBAAA,CAAAC,qBAAA,CACd,MAAO,CACLnB,OAAO,CAAE,KAAK,CACdE,KAAK,CAAE,EAAAgB,gBAAA,CAAAhB,KAAK,CAACZ,QAAQ,UAAA4B,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBjB,IAAI,UAAAkB,qBAAA,iBAApBA,qBAAA,CAAsBd,OAAO,GAAI,uBAC1C,CAAC,CACH,CACF,CAEA;AACAe,YAAYA,CAACnC,IAAI,CAAyG,IAAvG,CAAAoC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAG,IAAI,CAAG,IAAI,IAAE,CAAAG,YAAY,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,YAAY,CAAE,WAAW,CAAE,WAAW,CAAE,iBAAiB,CAAC,CACtH,KAAM,CAAAI,MAAM,CAAG,EAAE,CAEjB;AACA,GAAIzC,IAAI,CAAC0C,IAAI,CAAGN,OAAO,CAAE,CACvBK,MAAM,CAACE,IAAI,CAAC,gCAAgCP,OAAO,CAAG,IAAI,CAAG,IAAI,KAAK,CAAC,CACzE,CAEA;AACA,GAAI,CAACI,YAAY,CAACI,QAAQ,CAAC5C,IAAI,CAAC6C,IAAI,CAAC,CAAE,CACrCJ,MAAM,CAACE,IAAI,CAAC,sBAAsB,CAAC,CACrC,CAEA,MAAO,CACLG,OAAO,CAAEL,MAAM,CAACH,MAAM,GAAK,CAAC,CAC5BG,MACF,CAAC,CACH,CAEA;AACAM,iBAAiBA,CAAC/C,IAAI,CAAE,CACtB,GAAIA,IAAI,CAAC6C,IAAI,CAACG,UAAU,CAAC,QAAQ,CAAC,CAAE,CAClC,MAAO,CAAAC,GAAG,CAACC,eAAe,CAAClD,IAAI,CAAC,CAClC,CACA,MAAO,KAAI,CACb,CACF,CAEA,KAAM,CAAAmD,aAAa,CAAG,GAAI,CAAArD,aAAa,CAAC,CAAC,CACzC,cAAe,CAAAqD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}