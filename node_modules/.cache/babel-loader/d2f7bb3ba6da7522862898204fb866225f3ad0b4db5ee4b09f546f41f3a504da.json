{"ast":null,"code":"import apiClient from'./api';class PetService{// Get all pets for current user\nasync getPets(){try{const response=await apiClient.get('/pets');// รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\nconst pets=Array.isArray(response.data)?response.data:response.data.pets||response.data.data||[];return{success:true,pets};}catch(error){var _error$response,_error$response$data;return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to fetch pets'};}}// Get specific pet by ID\nasync getPet(petId){try{const response=await apiClient.get(`/pets/${petId}`);return{success:true,pet:response.data.pet};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch pet'};}}// Create new pet\nasync createPet(petData){try{const response=await apiClient.post('/pets',petData);return{success:true,pet:response.data.pet};}catch(error){var _error$response3,_error$response3$data;return{success:false,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to create pet'};}}// Update pet\nasync updatePet(petId,petData){try{const response=await apiClient.put(`/pets/${petId}`,petData);return{success:true,pet:response.data.pet};}catch(error){var _error$response4,_error$response4$data;return{success:false,error:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to update pet'};}}// Delete pet\nasync deletePet(petId){try{await apiClient.delete(`/pets/${petId}`);return{success:true};}catch(error){var _error$response5,_error$response5$data;return{success:false,error:((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to delete pet'};}}// Get health records for a pet\nasync getHealthRecords(petId){try{const response=await apiClient.get(`/pets/${petId}/health-records`);return{success:true,healthRecords:response.data.healthRecords};}catch(error){var _error$response6,_error$response6$data;return{success:false,error:((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Failed to fetch health records'};}}// Create health record for a pet\nasync createHealthRecord(petId,recordData){try{const response=await apiClient.post(`/pets/${petId}/health-records`,recordData);return{success:true,healthRecord:response.data.healthRecord};}catch(error){var _error$response7,_error$response7$data;return{success:false,error:((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Failed to create health record'};}}}const petService=new PetService();export default petService;export const getPets=async()=>{try{const response=await apiClient.get('/pets');// รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\nconst pets=Array.isArray(response.data)?response.data:response.data.pets||response.data.data||[];return{pets};}catch(error){var _error$response8,_error$response8$data;return{success:false,error:((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||'Failed to fetch pets'};}};","map":{"version":3,"names":["apiClient","PetService","getPets","response","get","pets","Array","isArray","data","success","error","_error$response","_error$response$data","message","getPet","petId","pet","_error$response2","_error$response2$data","createPet","petData","post","_error$response3","_error$response3$data","updatePet","put","_error$response4","_error$response4$data","deletePet","delete","_error$response5","_error$response5$data","getHealthRecords","healthRecords","_error$response6","_error$response6$data","createHealthRecord","recordData","healthRecord","_error$response7","_error$response7$data","petService","_error$response8","_error$response8$data"],"sources":["D:/senior.project/pet-health-docs/src/services/petService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass PetService {\r\n  // Get all pets for current user\r\n  async getPets() {\r\n    try {\r\n      const response = await apiClient.get('/pets');\r\n      // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\r\n      const pets = Array.isArray(response.data)\r\n        ? response.data\r\n        : response.data.pets || response.data.data || [];\r\n  return { success: true, pets };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pets',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get specific pet by ID\r\n  async getPet(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}`);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create new pet\r\n  async createPet(petData) {\r\n    try {\r\n      const response = await apiClient.post('/pets', petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update pet\r\n  async updatePet(petId, petData) {\r\n    try {\r\n      const response = await apiClient.put(`/pets/${petId}`, petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete pet\r\n  async deletePet(petId) {\r\n    try {\r\n      await apiClient.delete(`/pets/${petId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get health records for a pet\r\n  async getHealthRecords(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}/health-records`);\r\n      return { success: true, healthRecords: response.data.healthRecords };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch health records',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create health record for a pet\r\n  async createHealthRecord(petId, recordData) {\r\n    try {\r\n      const response = await apiClient.post(`/pets/${petId}/health-records`, recordData);\r\n      return { success: true, healthRecord: response.data.healthRecord };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create health record',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst petService = new PetService();\r\nexport default petService;\r\n\r\nexport const getPets = async () => {\r\n  try {\r\n    const response = await apiClient.get('/pets');\r\n    // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\r\n    const pets = Array.isArray(response.data)\r\n      ? response.data\r\n      : response.data.pets || response.data.data || [];\r\n    return { pets };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.response?.data?.message || 'Failed to fetch pets',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}