name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup environment
      run: |
        echo "Setting up deployment environment..."
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          echo "üöÄ Starting deployment..."
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          
          # Navigate to project directory
          cd pet-health-docs || cd /home/deploy/pet-health-docs
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Update environment variables if needed
          if [ ! -f "backend/.env.production" ]; then
            echo "‚ö†Ô∏è Production environment file not found"
            echo "Please create backend/.env.production with your production values"
            exit 1
          fi
          
          # Stop existing services
          echo "üõë Stopping existing services..."
          docker-compose -f docker-compose.prod.yml down || true
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker system prune -f || true
          
          # Build and start services
          echo "üî® Building and starting services..."
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Health checks
          echo "üè• Performing health checks..."
          
          # Check backend health
          if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
            echo "‚úÖ Backend is healthy"
          else
            echo "‚ùå Backend health check failed"
            echo "Backend logs:"
            docker-compose -f docker-compose.prod.yml logs backend
            exit 1
          fi
          
          # Check frontend health
          if curl -f http://localhost > /dev/null 2>&1; then
            echo "‚úÖ Frontend is healthy"
          else
            echo "‚ùå Frontend health check failed"
            echo "Frontend logs:"
            docker-compose -f docker-compose.prod.yml logs frontend
            exit 1
          fi
          
          # Show deployment status
          echo "üìä Deployment Status:"
          docker-compose -f docker-compose.prod.yml ps
          
          echo "üéâ Deployment completed successfully!"
          echo "Your Pet Health Assistant is now running at:"
          echo "  - Frontend: http://localhost"
          echo "  - Backend API: http://localhost:5000"
          echo "  - Health Check: http://localhost:5000/api/health"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi
