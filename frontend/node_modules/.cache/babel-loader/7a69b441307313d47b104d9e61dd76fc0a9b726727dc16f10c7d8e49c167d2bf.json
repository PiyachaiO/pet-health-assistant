{"ast":null,"code":"import api from './api'; // Assuming you have a configured axios instance in api.js\n\n/**\r\n * Fetches all users from the server.\r\n * @returns {Promise<Array>} A promise that resolves to an array of user objects.\r\n */\nexport const getUsers = async () => {\n  try {\n    const response = await api.get('/users');\n    return response.data;\n  } catch (error) {\n    // Log the error or handle it as needed\n    console.error('Error fetching users:', error);\n    // Re-throw the error to be caught by the calling component\n    throw error.response ? error.response.data : new Error('Network Error');\n  }\n};\n\n/**\r\n * Creates a new user.\r\n * @param {object} userData - The data for the new user (e.g., { name, email }).\r\n * @returns {Promise<object>} A promise that resolves to the newly created user object.\r\n */\nexport const createUser = async userData => {\n  try {\n    const response = await api.post('/users', userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw error.response ? error.response.data : new Error('Network Error');\n  }\n};\n\n/**\r\n * Updates an existing user by their ID.\r\n * @param {string|number} id - The ID of the user to update.\r\n * @param {object} userData - The updated data for the user.\r\n * @returns {Promise<object>} A promise that resolves to the updated user object.\r\n */\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating user ${id}:`, error);\n    throw error.response ? error.response.data : new Error('Network Error');\n  }\n};\n\n/**\r\n * Deletes a user by their ID.\r\n * @param {string|number} id - The ID of the user to delete.\r\n * @returns {Promise<void>} A promise that resolves when the user is successfully deleted.\r\n */\nexport const deleteUser = async id => {\n  try {\n    await api.delete(`/users/${id}`);\n  } catch (error) {\n    console.error(`Error deleting user ${id}:`, error);\n    throw error.response ? error.response.data : new Error('Network Error');\n  }\n};","map":{"version":3,"names":["api","getUsers","response","get","data","error","console","Error","createUser","userData","post","updateUser","id","put","deleteUser","delete"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/userService.js"],"sourcesContent":["import api from './api'; // Assuming you have a configured axios instance in api.js\r\n\r\n/**\r\n * Fetches all users from the server.\r\n * @returns {Promise<Array>} A promise that resolves to an array of user objects.\r\n */\r\nexport const getUsers = async () => {\r\n  try {\r\n    const response = await api.get('/users');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log the error or handle it as needed\r\n    console.error('Error fetching users:', error);\r\n    // Re-throw the error to be caught by the calling component\r\n    throw error.response ? error.response.data : new Error('Network Error');\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new user.\r\n * @param {object} userData - The data for the new user (e.g., { name, email }).\r\n * @returns {Promise<object>} A promise that resolves to the newly created user object.\r\n */\r\nexport const createUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/users', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating user:', error);\r\n    throw error.response ? error.response.data : new Error('Network Error');\r\n  }\r\n};\r\n\r\n/**\r\n * Updates an existing user by their ID.\r\n * @param {string|number} id - The ID of the user to update.\r\n * @param {object} userData - The updated data for the user.\r\n * @returns {Promise<object>} A promise that resolves to the updated user object.\r\n */\r\nexport const updateUser = async (id, userData) => {\r\n  try {\r\n    const response = await api.put(`/users/${id}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating user ${id}:`, error);\r\n    throw error.response ? error.response.data : new Error('Network Error');\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes a user by their ID.\r\n * @param {string|number} id - The ID of the user to delete.\r\n * @returns {Promise<void>} A promise that resolves when the user is successfully deleted.\r\n */\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    await api.delete(`/users/${id}`);\r\n  } catch (error) {\r\n    console.error(`Error deleting user ${id}:`, error);\r\n    throw error.response ? error.response.data : new Error('Network Error');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO,CAAC,CAAC;;AAEzB;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C;IACA,MAAMA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAG,IAAIG,KAAK,CAAC,eAAe,CAAC;EACzE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMF,GAAG,CAACU,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;IACnD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAG,IAAIG,KAAK,CAAC,eAAe,CAAC;EACzE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAOC,EAAE,EAAEH,QAAQ,KAAK;EAChD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMF,GAAG,CAACa,GAAG,CAAC,UAAUD,EAAE,EAAE,EAAEH,QAAQ,CAAC;IACxD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBO,EAAE,GAAG,EAAEP,KAAK,CAAC;IAClD,MAAMA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAG,IAAIG,KAAK,CAAC,eAAe,CAAC;EACzE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,UAAU,GAAG,MAAOF,EAAE,IAAK;EACtC,IAAI;IACF,MAAMZ,GAAG,CAACe,MAAM,CAAC,UAAUH,EAAE,EAAE,CAAC;EAClC,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBO,EAAE,GAAG,EAAEP,KAAK,CAAC;IAClD,MAAMA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAG,IAAIG,KAAK,CAAC,eAAe,CAAC;EACzE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}