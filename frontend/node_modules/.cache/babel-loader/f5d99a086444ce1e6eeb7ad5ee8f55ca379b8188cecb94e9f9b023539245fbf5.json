{"ast":null,"code":"import{useState,useEffect}from'react';import{getStorageItem,setStorageItem,removeStorageItem}from'../utils/helpers';export const useLocalStorage=(key,initialValue)=>{// Get value from localStorage or use initial value\nconst[storedValue,setStoredValue]=useState(()=>{try{const item=getStorageItem(key);return item!==null?item:initialValue;}catch(error){console.error(`Error reading localStorage key \"${key}\":`,error);return initialValue;}});// Update localStorage when state changes\nconst setValue=value=>{try{// Allow value to be a function so we have the same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;setStoredValue(valueToStore);setStorageItem(key,valueToStore);}catch(error){console.error(`Error setting localStorage key \"${key}\":`,error);}};// Remove value from localStorage\nconst removeValue=()=>{try{setStoredValue(initialValue);removeStorageItem(key);}catch(error){console.error(`Error removing localStorage key \"${key}\":`,error);}};// Listen for changes in other tabs/windows\nuseEffect(()=>{if(typeof window!=='undefined'){const handleStorageChange=e=>{if(e.key===key&&e.newValue!==null){try{setStoredValue(JSON.parse(e.newValue));}catch(error){console.error(`Error parsing localStorage value for key \"${key}\":`,error);}}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);}},[key]);return[storedValue,setValue,removeValue];};","map":{"version":3,"names":["useState","useEffect","getStorageItem","setStorageItem","removeStorageItem","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","error","console","setValue","value","valueToStore","Function","removeValue","window","handleStorageChange","e","newValue","JSON","parse","addEventListener","removeEventListener"],"sources":["D:/senior.project/pet-health-docs/frontend/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getStorageItem, setStorageItem, removeStorageItem } from '../utils/helpers';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // Get value from localStorage or use initial value\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = getStorageItem(key);\r\n      return item !== null ? item : initialValue;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Update localStorage when state changes\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      setStorageItem(key, valueToStore);\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Remove value from localStorage\r\n  const removeValue = () => {\r\n    try {\r\n      setStoredValue(initialValue);\r\n      removeStorageItem(key);\r\n    } catch (error) {\r\n      console.error(`Error removing localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Listen for changes in other tabs/windows\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const handleStorageChange = (e) => {\r\n        if (e.key === key && e.newValue !== null) {\r\n          try {\r\n            setStoredValue(JSON.parse(e.newValue));\r\n          } catch (error) {\r\n            console.error(`Error parsing localStorage value for key \"${key}\":`, error);\r\n          }\r\n        }\r\n      };\r\n\r\n      window.addEventListener('storage', handleStorageChange);\r\n      return () => window.removeEventListener('storage', handleStorageChange);\r\n    }\r\n  }, [key]);\r\n\r\n  return [storedValue, setValue, removeValue];\r\n};\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,cAAc,CAAEC,cAAc,CAAEC,iBAAiB,KAAQ,kBAAkB,CAEpF,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAACC,GAAG,CAAEC,YAAY,GAAK,CACpD;AACA,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,IAAM,CACnD,GAAI,CACF,KAAM,CAAAU,IAAI,CAAGR,cAAc,CAACI,GAAG,CAAC,CAChC,MAAO,CAAAI,IAAI,GAAK,IAAI,CAAGA,IAAI,CAAGH,YAAY,CAC5C,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCL,GAAG,IAAI,CAAEK,KAAK,CAAC,CAChE,MAAO,CAAAJ,YAAY,CACrB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAM,QAAQ,CAAIC,KAAK,EAAK,CAC1B,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACN,WAAW,CAAC,CAAGM,KAAK,CAC3EL,cAAc,CAACM,YAAY,CAAC,CAC5BZ,cAAc,CAACG,GAAG,CAAES,YAAY,CAAC,CACnC,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCL,GAAG,IAAI,CAAEK,KAAK,CAAC,CAClE,CACF,CAAC,CAED;AACA,KAAM,CAAAM,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAI,CACFR,cAAc,CAACF,YAAY,CAAC,CAC5BH,iBAAiB,CAACE,GAAG,CAAC,CACxB,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCL,GAAG,IAAI,CAAEK,KAAK,CAAC,CACnE,CACF,CAAC,CAED;AACAV,SAAS,CAAC,IAAM,CACd,GAAI,MAAO,CAAAiB,MAAM,GAAK,WAAW,CAAE,CACjC,KAAM,CAAAC,mBAAmB,CAAIC,CAAC,EAAK,CACjC,GAAIA,CAAC,CAACd,GAAG,GAAKA,GAAG,EAAIc,CAAC,CAACC,QAAQ,GAAK,IAAI,CAAE,CACxC,GAAI,CACFZ,cAAc,CAACa,IAAI,CAACC,KAAK,CAACH,CAAC,CAACC,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAOV,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6CAA6CL,GAAG,IAAI,CAAEK,KAAK,CAAC,CAC5E,CACF,CACF,CAAC,CAEDO,MAAM,CAACM,gBAAgB,CAAC,SAAS,CAAEL,mBAAmB,CAAC,CACvD,MAAO,IAAMD,MAAM,CAACO,mBAAmB,CAAC,SAAS,CAAEN,mBAAmB,CAAC,CACzE,CACF,CAAC,CAAE,CAACb,GAAG,CAAC,CAAC,CAET,MAAO,CAACE,WAAW,CAAEK,QAAQ,CAAEI,WAAW,CAAC,CAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}