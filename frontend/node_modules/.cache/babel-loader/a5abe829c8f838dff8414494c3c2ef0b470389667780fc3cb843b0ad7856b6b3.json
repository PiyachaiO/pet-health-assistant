{"ast":null,"code":"import apiClient from './api';\nclass NotificationService {\n  // Get all notifications for current user\n  async getNotifications() {\n    try {\n      const response = await apiClient.get('/notifications');\n      return {\n        success: true,\n        notifications: response.data.notifications\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch notifications'\n      };\n    }\n  }\n\n  // Get unread notifications count\n  async getUnreadCount() {\n    try {\n      const response = await apiClient.get('/notifications/unread/count');\n      return {\n        success: true,\n        count: response.data.count\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch unread count'\n      };\n    }\n  }\n\n  // Mark notification as read\n  async markAsRead(notificationId) {\n    try {\n      const response = await apiClient.patch(`/notifications/${notificationId}/read`);\n      return {\n        success: true,\n        notification: response.data.notification\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to mark notification as read'\n      };\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllAsRead() {\n    try {\n      const response = await apiClient.patch('/notifications/read-all');\n      return {\n        success: true,\n        message: response.data.message,\n        count: response.data.count\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to mark all notifications as read'\n      };\n    }\n  }\n\n  // Delete specific notification\n  async deleteNotification(notificationId) {\n    try {\n      await apiClient.delete(`/notifications/${notificationId}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete notification'\n      };\n    }\n  }\n\n  // Delete all notifications\n  async deleteAllNotifications() {\n    try {\n      await apiClient.delete('/notifications');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to delete all notifications'\n      };\n    }\n  }\n\n  // Create notification (Admin only)\n  async createNotification(notificationData) {\n    try {\n      const response = await apiClient.post('/notifications/admin/create', notificationData);\n      return {\n        success: true,\n        notification: response.data.notification\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to create notification'\n      };\n    }\n  }\n}\nconst notificationService = new NotificationService();\nexport default notificationService;\nexport const getNotifications = async () => {\n  try {\n    const response = await apiClient.get('/notifications');\n    return {\n      notifications: response.data.notifications\n    };\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    return {\n      success: false,\n      error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch notifications'\n    };\n  }\n};","map":{"version":3,"names":["apiClient","NotificationService","getNotifications","response","get","success","notifications","data","error","_error$response","_error$response$data","message","getUnreadCount","count","_error$response2","_error$response2$data","markAsRead","notificationId","patch","notification","_error$response3","_error$response3$data","markAllAsRead","_error$response4","_error$response4$data","deleteNotification","delete","_error$response5","_error$response5$data","deleteAllNotifications","_error$response6","_error$response6$data","createNotification","notificationData","post","_error$response7","_error$response7$data","notificationService","_error$response8","_error$response8$data"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/notificationService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass NotificationService {\r\n  // Get all notifications for current user\r\n  async getNotifications() {\r\n    try {\r\n      const response = await apiClient.get('/notifications');\r\n      return { success: true, notifications: response.data.notifications };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch notifications',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get unread notifications count\r\n  async getUnreadCount() {\r\n    try {\r\n      const response = await apiClient.get('/notifications/unread/count');\r\n      return { success: true, count: response.data.count };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch unread count',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark notification as read\r\n  async markAsRead(notificationId) {\r\n    try {\r\n      const response = await apiClient.patch(`/notifications/${notificationId}/read`);\r\n      return { success: true, notification: response.data.notification };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to mark notification as read',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark all notifications as read\r\n  async markAllAsRead() {\r\n    try {\r\n      const response = await apiClient.patch('/notifications/read-all');\r\n      return { success: true, message: response.data.message, count: response.data.count };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to mark all notifications as read',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete specific notification\r\n  async deleteNotification(notificationId) {\r\n    try {\r\n      await apiClient.delete(`/notifications/${notificationId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete notification',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete all notifications\r\n  async deleteAllNotifications() {\r\n    try {\r\n      await apiClient.delete('/notifications');\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete all notifications',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create notification (Admin only)\r\n  async createNotification(notificationData) {\r\n    try {\r\n      const response = await apiClient.post('/notifications/admin/create', notificationData);\r\n      return { success: true, notification: response.data.notification };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create notification',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst notificationService = new NotificationService();\r\nexport default notificationService;\r\n\r\nexport const getNotifications = async () => {\r\n  try {\r\n    const response = await apiClient.get('/notifications');\r\n    return { notifications: response.data.notifications };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.response?.data?.message || 'Failed to fetch notifications',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}