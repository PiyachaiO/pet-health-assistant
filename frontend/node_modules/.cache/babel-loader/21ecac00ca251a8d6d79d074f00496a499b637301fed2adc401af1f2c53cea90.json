{"ast":null,"code":"import apiClient from './api';\nclass AuthService {\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        access_token,\n        user\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', access_token);\n      return {\n        success: true,\n        user,\n        access_token\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await apiClient.post('/auth/register', userData);\n      const {\n        access_token,\n        user\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', access_token);\n      return {\n        success: true,\n        user,\n        access_token\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed'\n      };\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('token');\n    }\n  }\n\n  // Get current user profile\n  async getProfile() {\n    try {\n      const response = await apiClient.get('/users/profile');\n      return {\n        success: true,\n        user: response.data.user\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to get profile'\n      };\n    }\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await apiClient.put('/users/profile', profileData);\n      return {\n        success: true,\n        user: response.data.user\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update profile'\n      };\n    }\n  }\n\n  // Refresh token\n  async refreshToken(refreshToken) {\n    try {\n      const response = await apiClient.post('/auth/refresh', {\n        refresh_token: refreshToken\n      });\n      const {\n        access_token,\n        refresh_token\n      } = response.data;\n      localStorage.setItem('token', access_token);\n      return {\n        success: true,\n        access_token,\n        refresh_token\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Token refresh failed'\n      };\n    }\n  }\n\n  // Confirm email\n  async confirmEmail(email) {\n    try {\n      const response = await apiClient.post('/auth/confirm-email', {\n        email\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Email confirmation failed'\n      };\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["apiClient","AuthService","login","email","password","response","post","access_token","user","data","localStorage","setItem","success","error","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","console","removeItem","getProfile","get","_error$response3","_error$response3$data","updateProfile","profileData","put","_error$response4","_error$response4$data","refreshToken","refresh_token","_error$response5","_error$response5$data","confirmEmail","_error$response6","_error$response6$data","isAuthenticated","getItem","getToken"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/authService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass AuthService {\r\n  // Login user\r\n  async login(email, password) {\r\n    try {\r\n      const response = await apiClient.post('/auth/login', {\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      const { access_token, user } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', access_token);\r\n      \r\n      return { success: true, user, access_token };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Login failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Register user\r\n  async register(userData) {\r\n    try {\r\n      const response = await apiClient.post('/auth/register', userData);\r\n      const { access_token, user } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', access_token);\r\n      \r\n      return { success: true, user, access_token };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Registration failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      await apiClient.post('/auth/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n    }\r\n  }\r\n\r\n  // Get current user profile\r\n  async getProfile() {\r\n    try {\r\n      const response = await apiClient.get('/users/profile');\r\n      return { success: true, user: response.data.user };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to get profile',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  async updateProfile(profileData) {\r\n    try {\r\n      const response = await apiClient.put('/users/profile', profileData);\r\n      return { success: true, user: response.data.user };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update profile',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Refresh token\r\n  async refreshToken(refreshToken) {\r\n    try {\r\n      const response = await apiClient.post('/auth/refresh', {\r\n        refresh_token: refreshToken,\r\n      });\r\n      \r\n      const { access_token, refresh_token } = response.data;\r\n      localStorage.setItem('token', access_token);\r\n      \r\n      return { success: true, access_token, refresh_token };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Token refresh failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Confirm email\r\n  async confirmEmail(email) {\r\n    try {\r\n      const response = await apiClient.post('/auth/confirm-email', { email });\r\n      return { success: true, message: response.data.message };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Email confirmation failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated() {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  // Get stored token\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}