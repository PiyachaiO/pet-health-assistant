{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\senior.project\\\\pet-health-docs\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { authService } from \"../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Simplified and more robust initial loading logic\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchUser = async () => {\n    setLoading(true);\n    try {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        const userData = result.user;\n\n        // Load profile image if exists\n        if (userData.profile_picture_url) {\n          try {\n            // For existing images, try to fetch and convert to base64\n            if (userData.profile_picture_url.startsWith('/uploads/') || userData.profile_picture_url.startsWith('http://localhost:5000/api/upload/image/')) {\n              const filename = userData.profile_picture_url.includes('/') ? userData.profile_picture_url.split('/').pop() : userData.profile_picture_url;\n              const response = await fetch(`http://localhost:5000/api/upload/image/${filename}`);\n              if (response.ok) {\n                const blob = await response.blob();\n                const reader = new FileReader();\n                const base64Image = await new Promise(resolve => {\n                  reader.onload = e => resolve(e.target.result);\n                  reader.readAsDataURL(blob);\n                });\n                userData.profile_picture_url = base64Image;\n              }\n            }\n          } catch (error) {\n            console.error('Failed to load profile image:', error);\n          }\n        }\n        setUser(userData);\n      } else {\n        console.error(\"Failed to fetch user profile:\", result);\n        setUser(null); // Explicitly set user to null on failure\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      setUser(null);\n      localStorage.removeItem(\"token\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      const result = await authService.login(email, password);\n      if (result.success) {\n        const userData = result.user;\n\n        // Load profile image if exists\n        if (userData.profile_picture_url) {\n          try {\n            // For existing images, try to fetch and convert to base64\n            if (userData.profile_picture_url.startsWith('/uploads/') || userData.profile_picture_url.startsWith('http://localhost:5000/api/upload/image/')) {\n              const filename = userData.profile_picture_url.includes('/') ? userData.profile_picture_url.split('/').pop() : userData.profile_picture_url;\n              const response = await fetch(`http://localhost:5000/api/upload/image/${filename}`);\n              if (response.ok) {\n                const blob = await response.blob();\n                const reader = new FileReader();\n                const base64Image = await new Promise(resolve => {\n                  reader.onload = e => resolve(e.target.result);\n                  reader.readAsDataURL(blob);\n                });\n                userData.profile_picture_url = base64Image;\n              }\n            }\n          } catch (error) {\n            console.error('Failed to load profile image:', error);\n          }\n        }\n        setUser(userData);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Login failed\"\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      const result = await authService.register(userData);\n      if (result.success) {\n        setUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Registration failed\"\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setUser(null);\n      // Also remove the token from localStorage on logout\n      localStorage.removeItem(\"token\");\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const result = await authService.updateProfile(profileData);\n      if (result.success) {\n        setUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Failed to update profile\"\n      };\n    }\n  };\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const refreshUser = async () => {\n    await fetchUser();\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser,\n    refreshUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","token","localStorage","getItem","fetchUser","result","getProfile","success","userData","profile_picture_url","startsWith","filename","includes","split","pop","response","fetch","ok","blob","reader","FileReader","base64Image","Promise","resolve","onload","e","target","readAsDataURL","error","console","removeItem","login","email","password","register","logout","updateProfile","profileData","updateUser","refreshUser","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/senior.project/pet-health-docs/frontend/src/contexts/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect } from \"react\"\nimport { authService } from \"../services\"\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Simplified and more robust initial loading logic\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchUser = async () => {\n    setLoading(true);\n    try {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        const userData = result.user;\n        \n        // Load profile image if exists\n        if (userData.profile_picture_url) {\n          try {\n            // For existing images, try to fetch and convert to base64\n            if (userData.profile_picture_url.startsWith('/uploads/') || userData.profile_picture_url.startsWith('http://localhost:5000/api/upload/image/')) {\n              const filename = userData.profile_picture_url.includes('/') ? userData.profile_picture_url.split('/').pop() : userData.profile_picture_url\n              const response = await fetch(`http://localhost:5000/api/upload/image/${filename}`)\n              if (response.ok) {\n                const blob = await response.blob()\n                const reader = new FileReader()\n                const base64Image = await new Promise((resolve) => {\n                  reader.onload = (e) => resolve(e.target.result)\n                  reader.readAsDataURL(blob)\n                })\n                userData.profile_picture_url = base64Image\n              }\n            }\n          } catch (error) {\n            console.error('Failed to load profile image:', error)\n          }\n        }\n        \n        setUser(userData);\n      } else {\n        console.error(\"Failed to fetch user profile:\", result);\n        setUser(null); // Explicitly set user to null on failure\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      setUser(null);\n      localStorage.removeItem(\"token\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      const result = await authService.login(email, password);\n      if (result.success) {\n        const userData = result.user;\n        \n        // Load profile image if exists\n        if (userData.profile_picture_url) {\n          try {\n            // For existing images, try to fetch and convert to base64\n            if (userData.profile_picture_url.startsWith('/uploads/') || userData.profile_picture_url.startsWith('http://localhost:5000/api/upload/image/')) {\n              const filename = userData.profile_picture_url.includes('/') ? userData.profile_picture_url.split('/').pop() : userData.profile_picture_url\n              const response = await fetch(`http://localhost:5000/api/upload/image/${filename}`)\n              if (response.ok) {\n                const blob = await response.blob()\n                const reader = new FileReader()\n                const base64Image = await new Promise((resolve) => {\n                  reader.onload = (e) => resolve(e.target.result)\n                  reader.readAsDataURL(blob)\n                })\n                userData.profile_picture_url = base64Image\n              }\n            }\n          } catch (error) {\n            console.error('Failed to load profile image:', error)\n          }\n        }\n        \n        setUser(userData);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Login failed\",\n      };\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const register = async (userData) => {\n    try {\n      const result = await authService.register(userData)\n      if (result.success) {\n        setUser(result.user)\n      }\n      return result\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Registration failed\",\n      }\n    }\n  }\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setUser(null);\n      // Also remove the token from localStorage on logout\n      localStorage.removeItem(\"token\");\n    }\n  }\n\n  const updateProfile = async (profileData) => {\n    try {\n      const result = await authService.updateProfile(profileData)\n      if (result.success) {\n        setUser(result.user)\n      }\n      return result\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Failed to update profile\",\n      }\n    }\n  }\n\n  const updateUser = (userData) => {\n    setUser(userData)\n  }\n\n  const refreshUser = async () => {\n    await fetchUser()\n  }\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser,\n    refreshUser,\n    loading,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}