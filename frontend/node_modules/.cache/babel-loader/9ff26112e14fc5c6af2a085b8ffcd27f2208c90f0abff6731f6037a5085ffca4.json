{"ast":null,"code":"import apiClient from './api';\nclass PetService {\n  // Get all pets for current user\n  async getPets() {\n    try {\n      const response = await apiClient.get('/pets');\n      return {\n        success: true,\n        pets: response.data\n      }; // เปลี่ยนจาก 'data' เป็น 'pets'\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch pets'\n      };\n    }\n  }\n\n  // Get specific pet by ID\n  async getPet(petId) {\n    try {\n      const response = await apiClient.get(`/pets/${petId}`);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch pet'\n      };\n    }\n  }\n\n  // Create new pet\n  async createPet(petData) {\n    try {\n      const response = await apiClient.post('/pets', petData);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create pet'\n      };\n    }\n  }\n\n  // Update pet\n  async updatePet(petId, petData) {\n    try {\n      const response = await apiClient.put(`/pets/${petId}`, petData);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update pet'\n      };\n    }\n  }\n\n  // Delete pet\n  async deletePet(petId) {\n    try {\n      await apiClient.delete(`/pets/${petId}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete pet'\n      };\n    }\n  }\n\n  // Get health records for a pet\n  async getHealthRecords(petId) {\n    try {\n      const response = await apiClient.get(`/pets/${petId}/health-records`);\n      return {\n        success: true,\n        healthRecords: response.data.healthRecords\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch health records'\n      };\n    }\n  }\n\n  // Create health record for a pet\n  async createHealthRecord(petId, recordData) {\n    try {\n      const response = await apiClient.post(`/pets/${petId}/health-records`, recordData);\n      return {\n        success: true,\n        healthRecord: response.data.healthRecord\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to create health record'\n      };\n    }\n  }\n}\nconst petService = new PetService();\nexport default petService;","map":{"version":3,"names":["apiClient","PetService","getPets","response","get","success","pets","data","error","_error$response","_error$response$data","message","getPet","petId","pet","_error$response2","_error$response2$data","createPet","petData","post","_error$response3","_error$response3$data","updatePet","put","_error$response4","_error$response4$data","deletePet","delete","_error$response5","_error$response5$data","getHealthRecords","healthRecords","_error$response6","_error$response6$data","createHealthRecord","recordData","healthRecord","_error$response7","_error$response7$data","petService"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/petService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass PetService {\r\n  // Get all pets for current user\r\n  async getPets() {\r\n    try {\r\n      const response = await apiClient.get('/pets');\r\n      return { success: true, pets: response.data }; // เปลี่ยนจาก 'data' เป็น 'pets'\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pets',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get specific pet by ID\r\n  async getPet(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}`);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create new pet\r\n  async createPet(petData) {\r\n    try {\r\n      const response = await apiClient.post('/pets', petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update pet\r\n  async updatePet(petId, petData) {\r\n    try {\r\n      const response = await apiClient.put(`/pets/${petId}`, petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete pet\r\n  async deletePet(petId) {\r\n    try {\r\n      await apiClient.delete(`/pets/${petId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get health records for a pet\r\n  async getHealthRecords(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}/health-records`);\r\n      return { success: true, healthRecords: response.data.healthRecords };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch health records',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create health record for a pet\r\n  async createHealthRecord(petId, recordData) {\r\n    try {\r\n      const response = await apiClient.post(`/pets/${petId}/health-records`, recordData);\r\n      return { success: true, healthRecord: response.data.healthRecord };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create health record',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst petService = new PetService();\r\nexport default petService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}