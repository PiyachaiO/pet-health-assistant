{"ast":null,"code":"import apiClient from './api';\nclass PetService {\n  // Get all pets for current user\n  async getPets() {\n    try {\n      const response = await apiClient.get('/pets');\n      // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\n      const pets = Array.isArray(response.data) ? response.data : response.data.pets || response.data.data || [];\n      return {\n        pets\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch pets'\n      };\n    }\n  }\n\n  // Get specific pet by ID\n  async getPet(petId) {\n    try {\n      const response = await apiClient.get(`/pets/${petId}`);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch pet'\n      };\n    }\n  }\n\n  // Create new pet\n  async createPet(petData) {\n    try {\n      const response = await apiClient.post('/pets', petData);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create pet'\n      };\n    }\n  }\n\n  // Update pet\n  async updatePet(petId, petData) {\n    try {\n      const response = await apiClient.put(`/pets/${petId}`, petData);\n      return {\n        success: true,\n        pet: response.data.pet\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update pet'\n      };\n    }\n  }\n\n  // Delete pet\n  async deletePet(petId) {\n    try {\n      await apiClient.delete(`/pets/${petId}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete pet'\n      };\n    }\n  }\n\n  // Get health records for a pet\n  async getHealthRecords(petId) {\n    try {\n      const response = await apiClient.get(`/pets/${petId}/health-records`);\n      return {\n        success: true,\n        healthRecords: response.data.healthRecords\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch health records'\n      };\n    }\n  }\n\n  // Create health record for a pet\n  async createHealthRecord(petId, recordData) {\n    try {\n      const response = await apiClient.post(`/pets/${petId}/health-records`, recordData);\n      return {\n        success: true,\n        healthRecord: response.data.healthRecord\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to create health record'\n      };\n    }\n  }\n}\nconst petService = new PetService();\nexport default petService;\nexport const getPets = async () => {\n  try {\n    const response = await apiClient.get('/pets');\n    // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\n    const pets = Array.isArray(response.data) ? response.data : response.data.pets || response.data.data || [];\n    return {\n      pets\n    };\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    return {\n      success: false,\n      error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch pets'\n    };\n  }\n};","map":{"version":3,"names":["apiClient","PetService","getPets","response","get","pets","Array","isArray","data","error","_error$response","_error$response$data","success","message","getPet","petId","pet","_error$response2","_error$response2$data","createPet","petData","post","_error$response3","_error$response3$data","updatePet","put","_error$response4","_error$response4$data","deletePet","delete","_error$response5","_error$response5$data","getHealthRecords","healthRecords","_error$response6","_error$response6$data","createHealthRecord","recordData","healthRecord","_error$response7","_error$response7$data","petService","_error$response8","_error$response8$data"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/petService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass PetService {\r\n  // Get all pets for current user\r\n  async getPets() {\r\n    try {\r\n      const response = await apiClient.get('/pets');\r\n      // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\r\n      const pets = Array.isArray(response.data)\r\n        ? response.data\r\n        : response.data.pets || response.data.data || [];\r\n      return { pets };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pets',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get specific pet by ID\r\n  async getPet(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}`);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create new pet\r\n  async createPet(petData) {\r\n    try {\r\n      const response = await apiClient.post('/pets', petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update pet\r\n  async updatePet(petId, petData) {\r\n    try {\r\n      const response = await apiClient.put(`/pets/${petId}`, petData);\r\n      return { success: true, pet: response.data.pet };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete pet\r\n  async deletePet(petId) {\r\n    try {\r\n      await apiClient.delete(`/pets/${petId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete pet',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get health records for a pet\r\n  async getHealthRecords(petId) {\r\n    try {\r\n      const response = await apiClient.get(`/pets/${petId}/health-records`);\r\n      return { success: true, healthRecords: response.data.healthRecords };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch health records',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create health record for a pet\r\n  async createHealthRecord(petId, recordData) {\r\n    try {\r\n      const response = await apiClient.post(`/pets/${petId}/health-records`, recordData);\r\n      return { success: true, healthRecord: response.data.healthRecord };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create health record',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst petService = new PetService();\r\nexport default petService;\r\n\r\nexport const getPets = async () => {\r\n  try {\r\n    const response = await apiClient.get('/pets');\r\n    // รองรับทั้งกรณี backend คืน { pets: [...] } หรือ [...] ตรงๆ\r\n    const pets = Array.isArray(response.data)\r\n      ? response.data\r\n      : response.data.pets || response.data.data || [];\r\n    return { pets };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error.response?.data?.message || 'Failed to fetch pets',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}