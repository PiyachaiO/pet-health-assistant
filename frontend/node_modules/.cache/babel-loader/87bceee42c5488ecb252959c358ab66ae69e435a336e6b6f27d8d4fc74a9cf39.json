{"ast":null,"code":"import apiClient from './api';\nclass AppointmentService {\n  // Get all appointments for current user\n  async getAppointments() {\n    try {\n      const response = await apiClient.get('/appointments');\n      return {\n        success: true,\n        appointments: response.data.appointments\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch appointments'\n      };\n    }\n  }\n\n  // Get appointments for veterinarian\n  async getVetAppointments() {\n    try {\n      const response = await apiClient.get('/appointments/vet');\n      return {\n        success: true,\n        appointments: response.data.appointments\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch vet appointments'\n      };\n    }\n  }\n\n  // Get specific appointment by ID\n  async getAppointment(appointmentId) {\n    try {\n      const response = await apiClient.get(`/appointments/${appointmentId}`);\n      return {\n        success: true,\n        appointment: response.data.appointment\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch appointment'\n      };\n    }\n  }\n\n  // Create new appointment\n  async createAppointment(appointmentData) {\n    try {\n      const response = await apiClient.post('/appointments', appointmentData);\n      return {\n        success: true,\n        appointment: response.data.appointment\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to create appointment'\n      };\n    }\n  }\n\n  // Update appointment\n  async updateAppointment(appointmentId, appointmentData) {\n    try {\n      const response = await apiClient.put(`/appointments/${appointmentId}`, appointmentData);\n      return {\n        success: true,\n        appointment: response.data.appointment\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update appointment'\n      };\n    }\n  }\n\n  // Cancel appointment\n  async cancelAppointment(appointmentId) {\n    try {\n      const response = await apiClient.patch(`/appointments/${appointmentId}/cancel`);\n      return {\n        success: true,\n        appointment: response.data.appointment\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to cancel appointment'\n      };\n    }\n  }\n\n  // Delete appointment\n  async deleteAppointment(appointmentId) {\n    try {\n      await apiClient.delete(`/appointments/${appointmentId}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to delete appointment'\n      };\n    }\n  }\n}\nconst appointmentService = new AppointmentService();\nexport default appointmentService;\nexport const getAppointments = async () => {\n  try {\n    const response = await apiClient.get('/appointments');\n    return {\n      appointments: response.data.appointments\n    };\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch appointments');\n  }\n};","map":{"version":3,"names":["apiClient","AppointmentService","getAppointments","response","get","success","appointments","data","error","_error$response","_error$response$data","message","getVetAppointments","_error$response2","_error$response2$data","getAppointment","appointmentId","appointment","_error$response3","_error$response3$data","createAppointment","appointmentData","post","_error$response4","_error$response4$data","updateAppointment","put","_error$response5","_error$response5$data","cancelAppointment","patch","_error$response6","_error$response6$data","deleteAppointment","delete","_error$response7","_error$response7$data","appointmentService","_error$response8","_error$response8$data","Error"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/appointmentService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass AppointmentService {\r\n  // Get all appointments for current user\r\n  async getAppointments() {\r\n    try {\r\n      const response = await apiClient.get('/appointments');\r\n      return { success: true, appointments: response.data.appointments };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch appointments',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get appointments for veterinarian\r\n  async getVetAppointments() {\r\n    try {\r\n      const response = await apiClient.get('/appointments/vet');\r\n      return { success: true, appointments: response.data.appointments };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch vet appointments',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get specific appointment by ID\r\n  async getAppointment(appointmentId) {\r\n    try {\r\n      const response = await apiClient.get(`/appointments/${appointmentId}`);\r\n      return { success: true, appointment: response.data.appointment };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch appointment',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create new appointment\r\n  async createAppointment(appointmentData) {\r\n    try {\r\n      const response = await apiClient.post('/appointments', appointmentData);\r\n      return { success: true, appointment: response.data.appointment };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create appointment',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update appointment\r\n  async updateAppointment(appointmentId, appointmentData) {\r\n    try {\r\n      const response = await apiClient.put(`/appointments/${appointmentId}`, appointmentData);\r\n      return { success: true, appointment: response.data.appointment };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update appointment',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Cancel appointment\r\n  async cancelAppointment(appointmentId) {\r\n    try {\r\n      const response = await apiClient.patch(`/appointments/${appointmentId}/cancel`);\r\n      return { success: true, appointment: response.data.appointment };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to cancel appointment',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete appointment\r\n  async deleteAppointment(appointmentId) {\r\n    try {\r\n      await apiClient.delete(`/appointments/${appointmentId}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete appointment',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst appointmentService = new AppointmentService();\r\nexport default appointmentService;\r\n\r\nexport const getAppointments = async () => {\r\n  try {\r\n    const response = await apiClient.get('/appointments');\r\n    return { appointments: response.data.appointments };\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch appointments');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}