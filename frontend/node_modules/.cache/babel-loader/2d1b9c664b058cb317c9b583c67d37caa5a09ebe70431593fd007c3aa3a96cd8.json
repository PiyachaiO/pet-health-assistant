{"ast":null,"code":"import apiClient from './api';\nclass UploadService {\n  // Upload single file\n  async uploadFile(file, onProgress) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await apiClient.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          if (onProgress) {\n            const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onProgress(percentCompleted);\n          }\n        }\n      });\n      return {\n        success: true,\n        file: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to upload file'\n      };\n    }\n  }\n\n  // Upload multiple files\n  async uploadMultipleFiles(files, onProgress) {\n    try {\n      const formData = new FormData();\n      files.forEach(file => {\n        formData.append('files', file);\n      });\n      const response = await apiClient.post('/upload/multiple', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          if (onProgress) {\n            const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onProgress(percentCompleted);\n          }\n        }\n      });\n      return {\n        success: true,\n        files: response.data.files\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to upload files'\n      };\n    }\n  }\n\n  // Get uploaded files\n  async getUploadedFiles() {\n    try {\n      const response = await apiClient.get('/upload');\n      return {\n        success: true,\n        files: response.data.files\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch uploaded files'\n      };\n    }\n  }\n\n  // Delete file\n  async deleteFile(filename) {\n    try {\n      await apiClient.delete(`/upload/${filename}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to delete file'\n      };\n    }\n  }\n\n  // Validate file before upload\n  validateFile(file, maxSize = 5 * 1024 * 1024, allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']) {\n    const errors = [];\n\n    // Check file size\n    if (file.size > maxSize) {\n      errors.push(`ไฟล์มีขนาดใหญ่เกินไป (สูงสุด ${maxSize / 1024 / 1024}MB)`);\n    }\n\n    // Check file type\n    if (!allowedTypes.includes(file.type)) {\n      errors.push('ประเภทไฟล์ไม่ถูกต้อง');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Get file preview URL\n  getFilePreviewUrl(file) {\n    if (file.type.startsWith('image/')) {\n      return URL.createObjectURL(file);\n    }\n    return null;\n  }\n}\nconst uploadService = new UploadService();\nexport default uploadService;","map":{"version":3,"names":["apiClient","UploadService","uploadFile","file","onProgress","formData","FormData","append","response","post","headers","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","success","data","error","_error$response","_error$response$data","message","uploadMultipleFiles","files","forEach","_error$response2","_error$response2$data","getUploadedFiles","get","_error$response3","_error$response3$data","deleteFile","filename","delete","_error$response4","_error$response4$data","validateFile","maxSize","allowedTypes","errors","size","push","includes","type","isValid","length","getFilePreviewUrl","startsWith","URL","createObjectURL","uploadService"],"sources":["D:/senior.project/pet-health-docs/frontend/src/services/uploadService.js"],"sourcesContent":["import apiClient from './api';\r\n\r\nclass UploadService {\r\n  // Upload single file\r\n  async uploadFile(file, onProgress) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await apiClient.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress) {\r\n            const percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            onProgress(percentCompleted);\r\n          }\r\n        },\r\n      });\r\n\r\n      return { success: true, file: response.data };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to upload file',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Upload multiple files\r\n  async uploadMultipleFiles(files, onProgress) {\r\n    try {\r\n      const formData = new FormData();\r\n      files.forEach((file) => {\r\n        formData.append('files', file);\r\n      });\r\n\r\n      const response = await apiClient.post('/upload/multiple', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress) {\r\n            const percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            onProgress(percentCompleted);\r\n          }\r\n        },\r\n      });\r\n\r\n      return { success: true, files: response.data.files };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to upload files',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get uploaded files\r\n  async getUploadedFiles() {\r\n    try {\r\n      const response = await apiClient.get('/upload');\r\n      return { success: true, files: response.data.files };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch uploaded files',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete file\r\n  async deleteFile(filename) {\r\n    try {\r\n      await apiClient.delete(`/upload/${filename}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete file',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate file before upload\r\n  validateFile(file, maxSize = 5 * 1024 * 1024, allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf']) {\r\n    const errors = [];\r\n\r\n    // Check file size\r\n    if (file.size > maxSize) {\r\n      errors.push(`ไฟล์มีขนาดใหญ่เกินไป (สูงสุด ${maxSize / 1024 / 1024}MB)`);\r\n    }\r\n\r\n    // Check file type\r\n    if (!allowedTypes.includes(file.type)) {\r\n      errors.push('ประเภทไฟล์ไม่ถูกต้อง');\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  // Get file preview URL\r\n  getFilePreviewUrl(file) {\r\n    if (file.type.startsWith('image/')) {\r\n      return URL.createObjectURL(file);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst uploadService = new UploadService();\r\nexport default uploadService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}