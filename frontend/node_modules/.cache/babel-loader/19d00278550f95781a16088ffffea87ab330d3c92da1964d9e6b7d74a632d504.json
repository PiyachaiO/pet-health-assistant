{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getStorageItem, setStorageItem, removeStorageItem } from '../utils/helpers';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = getStorageItem(key);\n      return item !== null ? item : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Update localStorage when state changes\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      setStorageItem(key, valueToStore);\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Remove value from localStorage\n  const removeValue = () => {\n    try {\n      setStoredValue(initialValue);\n      removeStorageItem(key);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes in other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.error(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key]);\n  return [storedValue, setValue, removeValue];\n};\n_s(useLocalStorage, \"9ggYIYA8DfqCDEls6hr5DB/onxg=\");","map":{"version":3,"names":["useState","useEffect","getStorageItem","setStorageItem","removeStorageItem","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","error","console","setValue","value","valueToStore","Function","removeValue","handleStorageChange","e","newValue","JSON","parse","window","addEventListener","removeEventListener"],"sources":["D:/senior.project/pet-health-docs/frontend/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getStorageItem, setStorageItem, removeStorageItem } from '../utils/helpers';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // Get value from localStorage or use initial value\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = getStorageItem(key);\r\n      return item !== null ? item : initialValue;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Update localStorage when state changes\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      setStorageItem(key, valueToStore);\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Remove value from localStorage\r\n  const removeValue = () => {\r\n    try {\r\n      setStoredValue(initialValue);\r\n      removeStorageItem(key);\r\n    } catch (error) {\r\n      console.error(`Error removing localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Listen for changes in other tabs/windows\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === key && e.newValue !== null) {\r\n        try {\r\n          setStoredValue(JSON.parse(e.newValue));\r\n        } catch (error) {\r\n          console.error(`Error parsing localStorage value for key \"${key}\":`, error);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, [key]);\r\n\r\n  return [storedValue, setValue, removeValue];\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEpF,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EACpD;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF,MAAMW,IAAI,GAAGT,cAAc,CAACI,GAAG,CAAC;MAChC,OAAOK,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGJ,YAAY;IAC5C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCN,GAAG,IAAI,EAAEM,KAAK,CAAC;MAChE,OAAOL,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMO,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACN,WAAW,CAAC,GAAGM,KAAK;MAC3EL,cAAc,CAACM,YAAY,CAAC;MAC5Bb,cAAc,CAACG,GAAG,EAAEU,YAAY,CAAC;IACnC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCN,GAAG,IAAI,EAAEM,KAAK,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI;MACFR,cAAc,CAACH,YAAY,CAAC;MAC5BH,iBAAiB,CAACE,GAAG,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCN,GAAG,IAAI,EAAEM,KAAK,CAAC;IACnE;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACd,MAAMkB,mBAAmB,GAAIC,CAAC,IAAK;MACjC,IAAIA,CAAC,CAACd,GAAG,KAAKA,GAAG,IAAIc,CAAC,CAACC,QAAQ,KAAK,IAAI,EAAE;QACxC,IAAI;UACFX,cAAc,CAACY,IAAI,CAACC,KAAK,CAACH,CAAC,CAACC,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,OAAOT,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6CAA6CN,GAAG,IAAI,EAAEM,KAAK,CAAC;QAC5E;MACF;IACF,CAAC;IAEDY,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,mBAAmB,CAAC;IACvD,OAAO,MAAMK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,mBAAmB,CAAC;EACzE,CAAC,EAAE,CAACb,GAAG,CAAC,CAAC;EAET,OAAO,CAACG,WAAW,EAAEK,QAAQ,EAAEI,WAAW,CAAC;AAC7C,CAAC;AAACV,EAAA,CAnDWH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}